Selected file: /home/user/Downloads/hackaton/aws_ec2_instance_main_example.tf
Resources:
Resource Type: aws_instance, Resource Name: ubuntu
Provider: AWS
API called successfully! (Response is not JSON)
```gherkin
Feature: Secure AWS EC2 Instance Configuration (ubuntu)

  Scenario: Preventing Publicly Accessible Instances
    Given an AWS account with Terraform configured
    And a Terraform configuration defining an `aws_instance` resource with `ami` containing "ubuntu"
    And the `aws_instance` resource has a public IP assigned via `associate_public_ip_address = true`
    When the Terraform configuration is applied
    Then the deployment should fail with an error message indicating that public IP association is disallowed.
    And the `aws_instance` resource should not be created with a public IP address.


  Scenario: Enforcing SSH Key-Based Authentication
    Given an AWS account with Terraform configured
    And a Terraform configuration defining an `aws_instance` resource with `ami` containing "ubuntu"
    And the `aws_instance` resource has a user data script that sets a password for the user
    When the Terraform configuration is applied
    Then the deployment should fail with an error message indicating that password authentication is disallowed.
    And the `aws_instance` resource should not be created with a password set.
    And the `aws_instance` resource should be configured to use SSH key authentication.


  Scenario: Ensuring Security Group Restrictions
    Given an AWS account with Terraform configured
    And a Terraform configuration defining an `aws_instance` resource with `ami` containing "ubuntu"
    And a security group allowing inbound traffic on all ports from anywhere
    When the Terraform configuration is applied
    Then the deployment should fail with an error message indicating that the security group is too permissive.
    And the `aws_instance` resource should be associated with a security group that only allows SSH traffic on port 22 from specific IP addresses or CIDR blocks.


  Scenario: Preventing Root Access via SSH
    Given an AWS account with Terraform configured
    And a Terraform configuration defining an `aws_instance` resource with `ami` containing "ubuntu"
    And the `aws_instance` resource allows SSH access using the root user
    When the Terraform configuration is applied
    Then the deployment should fail with an error message indicating that root SSH access is disallowed.
    And the `aws_instance` resource should be configured to use a non-root user for SSH access.


  Scenario: Implementing Instance Metadata Service (IMDS) v2 with Strict Endpoint Restrictions
    Given an AWS account with Terraform configured
    And a Terraform configuration defining an `aws_instance` resource with `ami` containing "ubuntu"
    And the `aws_instance` resource is configured with IMDSv1
    When the Terraform configuration is applied
    Then the deployment should fail with an error message indicating that IMDSv1 is disallowed.
    And the `aws_instance` resource should be configured with IMDSv2 and strict endpoint restrictions.


  Scenario:  Using Instance Profiles for IAM Roles instead of inline credentials
    Given an AWS account with Terraform configured
    And a Terraform configuration defining an `aws_instance` resource with `ami` containing "ubuntu"
    And the `aws_instance` resource has inline IAM credentials defined
    When the Terraform configuration is applied
    Then the deployment should fail with an error message indicating that inline credentials are disallowed.
    And the `aws_instance` resource should be associated with an IAM instance profile.

```


