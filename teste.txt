Selected file: /home/user/Downloads/hackaton/aws_ec2_instance_main_example.tf
Resources:
Resource Type: aws_instance, Resource Name: ubuntu
Provider: AWS
API called successfully! (Response is not JSON)
```gherkin
Feature: Secure AWS EC2 Instance Configuration (ubuntu)

  Scenario: Preventing Publicly Accessible Instances
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    And the instance has a public IP assigned
    When the Terraform configuration is applied
    Then the instance should not be publicly accessible (i.e., the security group should not allow inbound SSH from 0.0.0.0/0)
    And the instance should have a security group associated with it that only allows SSH from approved IP addresses or CIDR blocks.


  Scenario: Enforcing SSH Key Authentication
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    And the instance is configured with a user data script
    When the Terraform configuration is applied
    Then the instance should be configured to only allow SSH key-based authentication.
    And the instance should not allow password authentication.


  Scenario: Ensuring Instance Metadata Service (IMDS) Security
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    When the Terraform configuration is applied
    Then the instance should have IMDSv2 enabled.
    And the instance should have IMDSv2 restricted to the instance's private IP address.


  Scenario: Managing Security Group Rules Effectively
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    And a security group is associated with the instance
    When the Terraform configuration is applied
    Then the security group should only allow necessary inbound traffic (e.g., SSH, HTTP/HTTPS if required).
    And the security group should have explicit outbound rules, not relying on default allow all.
    And all security group rules should be explicitly defined in the Terraform configuration, avoiding implicit rules.


  Scenario: Using Dedicated Security Groups
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    When the Terraform configuration is applied
    Then the instance should be associated with a dedicated security group, not sharing a security group with other instances or resources unless absolutely necessary.


  Scenario: Regular Security Patches
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    And the instance is configured with user data to install updates
    When the Terraform configuration is applied and the instance boots
    Then the instance should automatically install security updates upon boot.
    And the instance should be configured for automatic security updates.


  Scenario: Preventing Root Login
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    And a non-root user is created
    When the Terraform configuration is applied
    Then root login should be disabled.
    And the instance should only allow SSH login for the specified non-root user.


  Scenario:  EBS Volume Encryption
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    And an EBS volume is attached to the instance
    When the Terraform configuration is applied
    Then the EBS volume should be encrypted using AWS KMS.


  Scenario:  Instance Metadata Options
    Given an AWS infrastructure defined using Terraform with an "aws_instance" resource using an "ubuntu" AMI
    When the Terraform configuration is applied
    Then the instance should have `instance_metadata_options` set to restrict access to the instance metadata service.

```


